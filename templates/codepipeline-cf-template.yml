# Copyright [2018] [Phil Chen]
# Copyright [2019] [Alicia Smith] * Added multiple inputs 
# as well as codecommit source and lambda merge functionality
# drawing from inspiration here:
# https://github.com/tooltwist/codepipeline-artifact-munge

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09

Description: 'This solution allows you to create a AWS Codepipline for deploying a serverless application with AWS CodeBuild triggered by a CodeCommit or Github repo commit. The setup of this solution is fully automated via a CloudFormation template.'

Parameters:
  Environment:
    AllowedValues:
    - dev
    - stg
    - prod
    Description: Environment
    Type: String
    Default: dev

  Service:
    Description: The name of the service/external resource that will utilise this pipeline, e.g. zoom2mozdef.
    Type: String
    Default: template
    ConstraintDescription: "Can contain only ASCII characters."

  PipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use. Specify a unique prefix for the bucket name.
    Type: String
    Default: mozdef-ef-utility-bucket

  HelperBucket:
    Description: An EXISTING bucket which holds the merger lambda function code and codecommit code.
    Type: String
    Default: mozdef-ef-helper-bucket

  CodeCommitRepositoryBranch:
    Description: The name of the branch for the CodeCommit repo.
    Type: String
    Default: master
    ConstraintDescription: "Can contain only ASCII characters."
  
  # Removed personal access token parameter as it is accessed from 
  # AWS Secrets Manager
  GitHubRepository:
    Type: String
    # Defaulting to our public PoC repo
    Default: mozilla/mozdef-event-framework/master
    Description:  Github repository to be used as a source, in the form of "owner/repository/branch".

  ConfigDirectory:
    Type: String
    Default: config
    Description: Directory name for private configuration files for the merger lambda function.

# This helps grouping similar parameters together when deploying via AWS Console
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Stack Configuration"
        Parameters:
          - Environment
          - Service
          - PipelineBucketPrefix
          - HelperBucket
      - Label:
          default: "GitHub Configuration"
        Parameters:
          - GitHubRepository
      - Label:
          default: "CodeCommit Configuration"
        Parameters:
          - CodeCommitRepositoryBranch
          - ConfigDirectory

Resources:
  
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: CodeCommit repository to hold configuration files for the external source
      RepositoryName: !Join [ "", [ !Ref Service, "-ef-config" ]]
      Code:
        S3:
          Bucket: !Join [ "", [!Ref HelperBucket ]]
          # Hardcoding the name of the zip file containing
          # the skeleton/template files in the Codecommit repo 
          # (this does not have to change)
          Key: !Join [ "", [ "template-ef-config.zip" ]]

  CloudWatchCommitEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CloudWatchCommitEventRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
  
  CloudwatchCommitEventPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CloudwatchCommitEventPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: codepipeline:StartPipelineExecution
            Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline] ]
      Roles:
        - !Ref CloudWatchCommitEventRole

  CloudWatchCommitEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source: 
          - aws.codecommit
        detail-type: 
          - "CodeCommit Repository State Change"
        resources: 
          - !GetAtt 'CodeCommitRepository.Arn'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          repositoryName:
            - !GetAtt 'CodeCommitRepository.Name'
          referenceName:
            - !Ref CodeCommitRepositoryBranch
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline] ]
          RoleArn: !GetAtt 'CloudWatchCommitEventRole.Arn'
          Id: !Ref Pipeline

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodeBuildRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  # This can be restricted more
  CodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodeBuildPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      # This is one of the most tricky ones, we may have
      # to break the permissions down per resource
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'codebuild:*'
            Resource: !GetAtt TestBuildDeploy.Arn
          - Effect: Allow
            Action:
              - 'codecommit:GetBranch'
              - 'codecommit:GetCommit'
              - 'codecommit:UploadArchive'
              - 'codecommit:GetUploadArchiveStatus'
              - 'codecommit:CancelUploadArchive'
            Resource: !GetAtt 'CodeCommitRepository.Arn'
          - Effect: Allow
            Action:
              - 'cloudformation:ListChangeSets'
              - 'cloudformation:ListStackResources'
              - 'cloudformation:GetStackPolicy'
              - 'cloudformation:GetTemplate'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackResources'
              - 'cloudformation:DescribeStackResource'
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:UpdateStack'
            # Changing resource so a serverless stack can be deployed  
            Resource: !Join [ '', [ 'arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "stack/*"  ] ]
          - Effect: Allow
            Action:
              - 'lambda:AddPermission'
              - 'lambda:CreateAlias'
              - 'lambda:ListAliases'
              - 'lambda:DeleteFunction'
              - 'lambda:InvokeFunction'
              - 'lambda:PublishVersion'
              - 'lambda:RemovePermission'
              - 'lambda:UpdateAlias'
              - 'lambda:UpdateFunctionCode'
              - 'lambda:UpdateFunctionConfiguration'
              - 'lambda:GetFunction'
              - 'lambda:GetFunctionConfiguration'
              - 'lambda:ListVersionsByFunction'
            Resource:
              # Giving permissions on the lambda functions created 
              # by the serverless framework, based on the assumption
              # that serverless frameworks creates function names
              # based on service name and stage
              - !Join [ '', [ 'arn:aws:lambda:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "function", ':', !Ref Service, "-", !Ref Environment, "*" ] ]
              # Our merger lambda function
              - !GetAtt MergeLambda.Arn
          - Effect: Allow
            Action:
              - 'apigateway:GET'
              - 'apigateway:POST'
              - 'apigateway:PUT'
              - 'apigateway:DELETE'
              - 'apigateway:PATCH'
            # Note: This is still not ideal (giving access to all API
            # gateway resources in a region for a single account), 
            # but I could not find how to restrict it even further
            Resource: 
              - !Join [ '', [ 'arn:aws:apigateway:', !Ref 'AWS::Region', '::', "/restapis*" ] ]
              # This is ugly but URL-encoding seems to be required for this
              - !Join [ '', [ 'arn:aws:apigateway:' , !Ref 'AWS::Region', '::', '/tags/arn%3Aaws%3Aapigateway%3A', !Ref 'AWS::Region', '%3A%3A%2F', "restapis%2F*" ] ]
          - Effect: Allow
            Action:
              - 's3:CreateBucket'
              - 's3:DeleteBucket'
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
              - 's3:PutEncryptionConfiguration'
              - 's3:GetEncryptionConfiguration'
              - 's3:GetBucketLocation'
            # NOTE: The below is probably not true. Some permissions
            # require "conditions", and I am not sure how to define them yet.
            Resource: 
              - !GetAtt S3CodePipeline.Arn
              - !Join [ '', [ 'arn:aws:s3:::', !Ref HelperBucket ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref Service, '-', !Ref Environment, '-', 'serverlessdeploymentbucket*' ] ]
              - !Join [ '', [ !GetAtt S3CodePipeline.Arn, '/*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref HelperBucket, '/*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref Service, '-', !Ref Environment, '-', 'serverlessdeploymentbucket*', '/*' ] ]
          - Effect: Allow
            Action:
              - 'iam:PassRole'
              - 'iam:GetRole'
              - 'iam:CreateRole'
              - 'iam:PutRolePolicy'
              - 'iam:DeleteRolePolicy'
              - 'iam:DeleteRole'
            # Also not sure about this one
            Resource: 
              - !Join [ '', [ 'arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref Service, '-', !Ref Environment, '-', !Ref 'AWS::Region', '*' ] ]
              - !GetAtt CodeBuildRole.Arn
          - Effect: Allow
            Action:
              - 'events:RemoveTargets'
              - 'events:DeleteRule'
            Resource: !Join [ '', [ 'arn:aws:', 'events:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':rule/', !Ref CloudWatchCommitEventRule ] ]
          - Effect: Allow
            Action:
              - 'ssm:PutParameter'
              - 'ssm:GetParameter'
              - 'ssm:GetParametersByPath'
            Resource: !Join [ '', [ 'arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':parameter/*' ] ]
          - Effect: Allow
            Action:
              - 'ssm:AddTagsToResource'
            Resource: !Join [ '', [ 'arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':document/*' ] ]
          - Effect: Allow
            Action:
              - 'sqs:CreateQueue'
              - 'sqs:SendMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':*' ] ]
            # Seems like there are some permissions that are 
            # only applicable to "*" resource, maybe
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:DeleteLogGroup'
              - 'logs:DescribeLogGroups'
              - 'logs:FilterLogEvents'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'cloudformation:ListStacks'
              - 'cloudformation:GetTemplateSummary'
              - 'cloudformation:ValidateTemplate'
              - 'cloudformation:CreateUploadBucket'
              - 'cloudformation:DescribeAccountLimits'
              - 'cloudformation:DescribeChangeSet'
              - 'lambda:CreateFunction'
              - 'lambda:PublishLayerVersion'
              - 'lambda:ListTags'
              - 'lambda:TagResource'
              - 'lambda:UntagResource'
              - 'cloudwatch:GetMetricStatistics'
              - 'events:PutEvents'
              - 'events:PutRule'
              - 'events:PutTargets'
              - 'sqs:ListQueues'
            Resource: "*"
      Roles:
        -  !Ref CodeBuildRole

  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["PipelineRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"

  PipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["PipelinePolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:putObject
              - s3:getObject
            Resource:
              # NOTE: The below is probably not true. Some permissions
              # require "conditions", and I am not sure how to define them yet.
              - !Join [ '', [ !GetAtt S3CodePipeline.Arn, '/*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref HelperBucket, '/*' ] ]
          - Effect: Allow
            Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
            Resource: !GetAtt CodeCommitRepository.Arn
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              # Giving permissions on the lambda functions created 
              # by the serverless framework, based on the assumption
              # that serverless frameworks creates function names
              # based on service name and stage
              - !Join [ '', [ 'arn:aws:lambda:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "function", ':', !Ref Service, "-", !Ref Environment, "*" ] ]
              # Our merger lambda function
              - !GetAtt MergeLambda.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Join [ '', [ 'arn:aws:secretsmanager:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "secret", ':', !Ref Environment, '/codepipeline/github*' ] ]
          - Effect: Allow
            Action:
              - codebuild:*
            Resource: !GetAtt TestBuildDeploy.Arn
      Roles:
        -  !Ref PipelineRole
  
  PipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        'Fn::Join': [ "", ["PipelineLambdaRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"

  PipelineLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["PipelineLambdaPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              # NOTE: The below is probably not true. Some permissions
              # require "conditions", and I am not sure how to define them yet.
              - !Join [ '', [ !GetAtt S3CodePipeline.Arn, '/*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref HelperBucket, '/*' ] ]
          - Effect: Allow
            Action:
              - s3:GetBucketVersioning
            Resource:
              - !GetAtt S3CodePipeline.Arn
              - !Join [ '', [ 'arn:aws:s3:::', !Ref HelperBucket ] ]
          - Effect: Allow
            Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
            Resource: !GetAtt CodeCommitRepository.Arn
          - Effect: Allow
            Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Resource: !GetAtt TestBuildDeploy.Arn
          - Effect: Allow
            Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              - lambda:*
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: 
              # Also not sure about this one
              # - !Join [ '', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', ':role/', !Ref CodePipelineLambdaRole ] ]
              - !GetAtt CodePipelineLambdaRole.Arn
          - Effect: Allow
            Action:
              - 'cloudformation:ListChangeSets'
              - 'cloudformation:ListStackResources'
              - 'cloudformation:GetStackPolicy'
              - 'cloudformation:GetTemplate'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackResources'
              - 'cloudformation:DescribeStackResource'
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:UpdateStack'
            Resource: 
              - !Join [ '', [ 'arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "stack/", !Ref 'AWS::StackName' , "/*"  ] ]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - 'cloudformation:ListStacks'
              - 'cloudformation:GetTemplateSummary'
              - 'cloudformation:ValidateTemplate'
              - 'cloudformation:CreateUploadBucket'
              - 'cloudformation:DescribeAccountLimits'
              - 'cloudformation:DescribeChangeSet'
            Resource: "*"
      Roles:
        -  !Ref PipelineLambdaRole
  
  S3Pipeline:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", [!Ref PipelineBucketPrefix,  "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
  
  MergeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        'Fn::Join': [ "", ["PipelineMergeLambda", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      Code:
        # Using the HelperBucket parameter here
        S3Bucket: !Join [ "", [!Ref HelperBucket ]]
        S3Key: merge.zip
      Role: !GetAtt 'PipelineLambdaRole.Arn'
      Description: "Lambda Function to merge artifacts in CodePipeline"
      Timeout: 30
      Handler: "merge.handler"
      Runtime: "nodejs10.x"
      MemorySize: 128

  TestBuildDeploy:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Join ["", ["Test-Build",  "-", !Ref 'AWS::StackName'] ]
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Join [ "", [!Ref 'ConfigDirectory', "/", "buildspec", "-", !Ref 'Environment', ".yml"]]
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
      Artifacts:
        Type: CODEPIPELINE

  # CodePipeline with its stages:
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Join [ "", ["MozDef-Pipeline", "-", !Ref 'AWS::StackName'] ]
      ArtifactStore:
        Location: !Ref S3Pipeline
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:

        # Stage 1:  Get the source from CodeCommit, and then from the Github repo
        - Name: Source
          Actions:
            - Name: ConfigSource
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: !Ref CodeCommitRepositoryBranch
                RepositoryName: !GetAtt 'CodeCommitRepository.Name'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: ConfigSourceOutput
            - Name: CodeSource
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
                Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
                Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
                # Since we are not using a webhook, we need to poll
                PollForSourceChanges: true
                # Obtaining from Secrets Manager
                OAuthToken: !Join [ "", [ "{{resolve:secretsmanager:", !Ref Environment, "/codepipeline/github:SecretString:PersonalAccessToken}}" ]]
              OutputArtifacts:
                - Name: CodeSourceOutput

        # Stage 2: Merge the Sources into one Artifact
        # This merges the App and SecureConfig artifacts
        # See https://dzone.com/articles/running-aws-lambda-functions-in-aws-codepipeline-u
        - Name: Merge
          Actions:
            - Name: Merge-App-and-Config
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref MergeLambda
                UserParameters: !Ref ConfigDirectory
              InputArtifacts:
                - Name: CodeSourceOutput
                - Name: ConfigSourceOutput
              OutputArtifacts:
                - Name: Build-Ready
              RunOrder: 2
  
        # Stage 3:  Build using Serverless Framework
        - Name: TestBuildDeploy
          Actions:
            - Name: !Join [ "", ["TestBuildDeploy",  "-", !Ref 'AWS::StackName'] ]
              RunOrder: 3
              InputArtifacts:
                - Name: Build-Ready
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref TestBuildDeploy
              OutputArtifacts:
                - Name: Deploy-Ready

Outputs:
  CodeBuild:
    Value: !Ref Pipeline
  Environment:
    Value: !Ref Environment
  CodecommitRepo:
    Value: !GetAtt 'CodeCommitRepository.Name'
  CodecommitBranch:
    Value: !Ref CodeCommitRepositoryBranch
  GithubRepo:
    Value: !Ref GitHubRepository
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  CodeBuildPolicy:
    Value: !Ref CodeBuildPolicy
  PipelineRole:
    Value: !Ref PipelineRole
  PipelineLambdaRole:
    Value: !Ref PipelineLambdaRole
  PipelinePolicy:
    Value: !Ref PipelinePolicy
  PipelineLambdaPolicy:
    Value: !Ref PipelineLambdaPolicy
  S3Pipeline:
    Value: !Ref S3Pipeline
